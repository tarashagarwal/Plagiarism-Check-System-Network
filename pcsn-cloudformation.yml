Resources:
  # VPC
  PlagiarismCheckSystemVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Plagiarism Check System Network

  # Internet Gateway
  PlagiarismCheckSystemInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Plagiarism Check System Network Internet Gateway

  # Internet Gateway Attachment
  PlagiarismCheckSystemVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      InternetGatewayId: !Ref PlagiarismCheckSystemInternetGateway

  PlagiarismCheckSystemVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Plagiarism Check System Network Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: PlagiarismCheckSystemVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PlagiarismCheckSystemVPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PlagiarismCheckSystemInternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Public Subnet 2

  PublicSubnet1RouteTableAssociation:
    DependsOn: PublicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PlagiarismCheckSystemVPCRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    DependsOn: PublicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PlagiarismCheckSystemVPCRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      AvailabilityZone: us-east-1d
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Private Subnet 2

  # Security Groups
  PCSNBastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH traffic to Bastion Host
      VpcId: !Ref PlagiarismCheckSystemVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: PCSN-Bastion-Host

  # EC2 Instances
  BastionHost1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0557a15b87f6559cf # Ubuntu 18.04 LTS
      KeyName: vockey
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref PCSNBastionHostSecurityGroup
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Bastion Host 1

  BastionHost1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BastionHost1EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref BastionHost1
      AllocationId: !GetAtt BastionHost1EIP.AllocationId

  BastionHost2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0557a15b87f6559cf  # Ubuntu 18.04 LTS
      KeyName: vockey
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref PCSNBastionHostSecurityGroup
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Bastion Host 2

  BastionHost2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BastionHost2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref BastionHost2
      AllocationId: !GetAtt BastionHost2EIP.AllocationId

  PCSNPrivateSecurityGroup1:
    DependsOn: 
      - BastionHost1
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH traffic from Bastion Host
      VpcId: !Ref PlagiarismCheckSystemVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # CidrIp: !Sub "${BastionHost1EIP.AllocationId}/32"
          CidrIp: !Sub "0.0.0.0/0"
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: PCSN-Bastion-Host

  PCSNPrivateSecurityGroup2:
    DependsOn: 
      - BastionHost2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH traffic from Bastion Host
      VpcId: !Ref PlagiarismCheckSystemVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  
          CidrIp: !Sub "0.0.0.0/0"
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: PCSN-Bastion-Host

  PCSNPrivateSecurityGroup11:
    DependsOn: 
      - BastionHost1
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH traffic from Bastion Host
      VpcId: !Ref PlagiarismCheckSystemVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # CidrIp: !Sub "${BastionHost2EIP.AllocationId}/32"
          CidrIp: !Sub "0.0.0.0/0"
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: PCSN-Bastion-Host

  PCSNPrivateSecurityGroup22:
    DependsOn: 
      - BastionHost2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH traffic from Bastion Host
      VpcId: !Ref PlagiarismCheckSystemVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # CidrIp: !Sub "${BastionHost1EIP.AllocationId}/32"
          CidrIp: !Sub "0.0.0.0/0"
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: PCSN-Bastion-Host    

  PrivateInstance1:
    DependsOn: BastionHost1
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0557a15b87f6559cf  # Ubuntu 18.04 LTS
      KeyName: PCSN-Private-Key
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref PCSNPrivateSecurityGroup1
        - !Ref PCSNPrivateSecurityGroup11
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Private Instance 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo apt install software-properties-common -y
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt update
          sudo apt install python3.9 -y

          # Create the cronjob
          sudo crontab -l > mycron
          echo "0 * * * * /usr/bin/python3 /load_and_process.py" >> mycron
          sudo crontab mycron
          rm mycron

          touch /load_and_process.py


  PrivateInstance2:
    DependsOn: BastionHost2
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0557a15b87f6559cf # Ubuntu 18.04 LTS
      KeyName: PCSN-Private-Key
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref PCSNPrivateSecurityGroup2
        - !Ref PCSNPrivateSecurityGroup22
      Tags:
        - Key: Type
          Value: Term Project
        - Key: Name
          Value: Private Instance 2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo apt install software-properties-common -y
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt update
          sudo apt install python3.9 -y

          # Create the cronjob
          sudo crontab -l > mycron
          echo "0 * * * * /usr/bin/python3 /load_and_process.py" >> mycron
          sudo crontab mycron
          rm mycron

          touch /load_and_process.py

  ################## S3 Bucket Configuration Here #####################

  PCSNRawDocumentBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: pdsn-raw-documents

  PCSNRawDocumentBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PCSNRawDocumentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:*"
            Resource: !Join ['', ['arn:aws:s3:::', !Ref PCSNRawDocumentBucket, '/*']]
            Condition:
              StringEquals:
                aws:sourceVpc: !Ref PlagiarismCheckSystemVPC
              'ArnLike':
                aws:SourceArn: !Join ['', ['arn:aws:ec2:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':subnet/', !Ref PrivateSubnet1]]
              'ArnLike':
                aws:SourceArn: !Join ['', ['arn:aws:ec2:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':subnet/', !Ref PrivateSubnet2]]

  PCSNProcessedDocumentBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: pdsn-processed-documents

  PCSNProcessedDocumentBucketEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref PlagiarismCheckSystemVPC
      RouteTableIds: 
        - !Ref PlagiarismCheckSystemVPCRouteTable

  PCSNProcessedDocumentBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PCSNProcessedDocumentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:*"
            Resource: !Join ['', ['arn:aws:s3:::', !Ref PCSNProcessedDocumentBucket, '/*']]
            Condition:
              StringEquals:
                aws:sourceVpc: !Ref PlagiarismCheckSystemVPC
              'ArnLike':
                aws:SourceArn: !Join ['', ['arn:aws:ec2:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':subnet/', !Ref PrivateSubnet1]]
              'ArnLike':
                aws:SourceArn: !Join ['', ['arn:aws:ec2:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':subnet/', !Ref PrivateSubnet2]]
                'aws:sourceVpce': !Ref PCSNProcessedDocumentBucketEndpoint

  PCSNSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: pcsn-sqs-queue

  PCSNFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "PCSNF-doc-upload-function"
      Code:
        ZipFile: |
          import boto3
          import json
          def lambda_handler(event, context):
              print(event)

              body = json.loads(event['body'])
              text = body['text']
              file_name = body["filename"]
              
              # Create S3 client
              s3 = boto3.client('s3')
              
              # Upload text to S3 bucket
              bucket_name = 'pdsn-raw-documents'
              file_name = 'file.txt'
              s3.put_object(Bucket=bucket_name, Key=file_name, Body=text)
              
              queue_url = !GetAtt PCSNSqsQueue.Arn
              response = sqs.send_message(QueueUrl=queue_url, MessageBody=text)
              
              # Return success message
              return {
                  'statusCode': 200,
                  'body': 'Document Submitted Successfully'
              }

      Handler: "index.lambda_handler"
      Role: "arn:aws:iam::596092100714:role/LabRole"
      Runtime: "python3.9"

  PCSNFunctionPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref PCSNFunction
      Principal: '*'

  RuntimeLambdaUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: NONE
      TargetFunctionArn: !Ref PCSNFunction

  PCSNSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Processed Document SNS 
      TopicName: document-processed

  PCSNSNSTopicEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref PCSNSNSTopic
      Endpoint: tarashagarwal26@gmail.com
      

################################# NAT Gateway ##########################

  NatGatewayEip1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: Name
          Value: Lab NAT Gateway EIP

  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGatewayEip1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Lab NAT Gateway 1

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

  PrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway1

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  NatGatewayEip2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: Name
          Value: PSCN NAT Gateway EIP

  NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGatewayEip2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: PSCN NAT Gateway 2

  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref PlagiarismCheckSystemVPC
      Tags:
        - Key: Name
          Value: Private Route Table 2

  PrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway2

  PublicSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2



###############################################################################

Outputs:
  runtimeLambdaUrl:
    Value: !GetAtt RuntimeLambdaUrl.FunctionUrl




